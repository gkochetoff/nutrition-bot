const { Scenes, Markup } = require('telegraf');
const userController = require('../controllers/userController');
const { getMainMenuKeyboard } = require('../keyboards');
const { 
  calculateBMR,
  activityFactor,
  adjustCaloriesForGoal,
  calculateMacros
} = require('../services/macrosService');

const registerScene = new Scenes.WizardScene(
  'registerScene',
  // 1. –í–æ–∑—Ä–∞—Å—Ç
  (ctx) => {
    ctx.reply('üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):');
    ctx.wizard.state.data = {};
    return ctx.wizard.next();
  },
  // 2. –ü–æ–ª
  (ctx) => {
    const age = parseInt(ctx.message.text);
    if (isNaN(age) || age <= 0) {
      ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–≤–æ–∑—Ä–∞—Å—Ç).');
      return;
    }
    ctx.wizard.state.data.age = age;
    ctx.reply('üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:', Markup.keyboard([
      ['–ú', '–ñ']
    ]).resize().oneTime());
    return ctx.wizard.next();
  },
  // 3. –í–µ—Å
  (ctx) => {
    const genderInput = ctx.message.text.trim().toLowerCase();
    if (!['–º','–∂','m','f','–º—É–∂','–∂–µ–Ω'].some(g => genderInput.includes(g))) {
      ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ "–ú" (–º—É–∂) –∏–ª–∏ "–ñ" (–∂–µ–Ω).');
      return;
    }
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 'M' / 'F' –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–æ–Ω–∫–µ –ë–î gender VARCHAR(2)
    const gender = (genderInput.includes('–º')) || (genderInput.startsWith('m')) || (genderInput.includes('–º—É–∂'))
      ? 'M'
      : 'F';
    ctx.wizard.state.data.gender = gender;
    ctx.reply('‚öñÔ∏è –í–∞—à –≤–µ—Å (–∫–≥):', Markup.removeKeyboard());
    return ctx.wizard.next();
  },
  // 4. –†–æ—Å—Ç
  (ctx) => {
    const weight = parseFloat(ctx.message.text.replace(',', '.'));
    if (isNaN(weight) || weight <= 0) {
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ).');
      return;
    }
    ctx.wizard.state.data.weight = weight;
    ctx.reply('üìè –í–∞—à —Ä–æ—Å—Ç (—Å–º):');
    return ctx.wizard.next();
  },
  // 5. –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  (ctx) => {
    const height = parseInt(ctx.message.text);
    if (isNaN(height) || height <= 0) {
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—Å–º, —á–∏—Å–ª–æ).');
      return;
    }
    ctx.wizard.state.data.height = height;
    ctx.reply('ü§∏ –£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', Markup.keyboard([
      ['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π']
    ]).resize().oneTime());
    return ctx.wizard.next();
  },
  // 6. –¶–µ–ª—å
  (ctx) => {
    const activity = ctx.message.text.toLowerCase();
    if (!['–Ω–∏–∑–∫–∏–π','—Å—Ä–µ–¥–Ω–∏–π','–≤—ã—Å–æ–∫–∏–π'].includes(activity)) {
      ctx.reply('–£–∫–∞–∂–∏—Ç–µ: –Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π.');
      return;
    }
    ctx.wizard.state.data.activity = activity;
    ctx.reply('ü•Ö –í–∞—à–∞ —Ü–µ–ª—å:', Markup.keyboard([
      ['—Å–±—Ä–æ—Å –≤–µ—Å–∞', '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ', '–Ω–∞–±–æ—Ä –≤–µ—Å–∞']
    ]).resize().oneTime());
    return ctx.wizard.next();
  },
  // 7. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  async (ctx) => {
    const goalInput = ctx.message.text.toLowerCase();
    let goal = 'maintain';
    if (goalInput.includes('—Å–±—Ä–æ—Å')) goal = 'lose';
    else if (goalInput.includes('–Ω–∞–±–æ—Ä')) goal = 'gain';

    ctx.wizard.state.data.goal = goal;

    const { age, gender, weight, height, activity } = ctx.wizard.state.data;
    // –†–∞—Å—á—ë—Ç BMR
    const bmr = calculateBMR({ weight, height, age, gender });
    const tdee = bmr * activityFactor(activity);
    const dailyCalories = adjustCaloriesForGoal(tdee, goal);
    const macros = calculateMacros(dailyCalories);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegramId = ctx.from.id;
    const oldUser = await userController.getUserByTelegramId(telegramId);
    
    // –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ "–∏–∑–º–µ–Ω–∏–ª–∏—Å—å"
    let dataChanged = !oldUser;
    if (oldUser) {
      // –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–≤ –ë–î –º–æ–≥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∏ –≤—Ä–æ–¥–µ '76.00')
      const oldAge = parseInt(oldUser.age);
      const oldWeight = parseFloat(oldUser.weight);
      const oldHeight = parseInt(oldUser.height);
      const oldGender = oldUser.gender;
      const oldActivity = oldUser.activity_level;
      const oldGoal = oldUser.goal;

      dataChanged =
        oldAge !== parseInt(age) ||
        oldGender !== gender ||
        oldWeight !== parseFloat(weight) ||
        oldHeight !== parseInt(height) ||
        oldActivity !== activity ||
        oldGoal !== goal;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await userController.upsertUser({
      telegram_id: telegramId,
      age,
      gender,
      weight,
      height,
      activity,
      goal,
      daily_calories: dailyCalories,
      protein: macros.protein,
      fat: macros.fat,
      carbs: macros.carbs
    });

    // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (dataChanged) {
      await ctx.reply(
        `‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n` +
        `üìä –í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞:\n` +
        `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: <b>${dailyCalories} –∫–∫–∞–ª</b>\n` +
        `‚Ä¢ –ë–µ–ª–∫–∏: <b>${macros.protein} –≥</b>\n` +
        `‚Ä¢ –ñ–∏—Ä—ã: <b>${macros.fat} –≥</b>\n` +
        `‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: <b>${macros.carbs} –≥</b>`,
        { parse_mode: 'HTML' }
      );
    } else {
      await ctx.reply(
        `‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.`,
        { parse_mode: 'HTML' }
      );
    }

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é
    if (dataChanged && oldUser) {
      const { Markup } = require('telegraf');
      await ctx.reply(
        'üîÑ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å. –•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤?',
        Markup.keyboard([
          ['‚úÖ –î–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é', '‚ùå –ù–µ—Ç, –ø–æ–∑–∂–µ']
        ]).resize().oneTime()
      );
    } else {
      await ctx.reply(
        'üçΩÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
        getMainMenuKeyboard()
      );
    }

    return ctx.scene.leave();
  }
);

module.exports = registerScene;
