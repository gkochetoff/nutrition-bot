const { Scenes, Markup } = require('telegraf');
const userController = require('../controllers/userController');
const { 
  calculateBMR,
  activityFactor,
  adjustCaloriesForGoal,
  calculateMacros
} = require('../services/macrosService');

const registerScene = new Scenes.WizardScene(
  'registerScene',
  // 1. –í–æ–∑—Ä–∞—Å—Ç
  (ctx) => {
    ctx.reply('üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):');
    ctx.wizard.state.data = {};
    return ctx.wizard.next();
  },
  // 2. –ü–æ–ª
  (ctx) => {
    const age = parseInt(ctx.message.text);
    if (isNaN(age) || age <= 0) {
      ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–≤–æ–∑—Ä–∞—Å—Ç).');
      return;
    }
    ctx.wizard.state.data.age = age;
    ctx.reply('üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:', Markup.keyboard([
      ['–ú', '–ñ']
    ]).resize().oneTime());
    return ctx.wizard.next();
  },
  // 3. –í–µ—Å
  (ctx) => {
    const genderInput = ctx.message.text.trim().toLowerCase();
    if (!['–º','–∂','m','f','–º—É–∂','–∂–µ–Ω'].some(g => genderInput.includes(g))) {
      ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ "–ú" (–º—É–∂) –∏–ª–∏ "–ñ" (–∂–µ–Ω).');
      return;
    }
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 'M' / 'F' –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–æ–Ω–∫–µ –ë–î gender VARCHAR(2)
    const gender = (genderInput.includes('–º')) || (genderInput.startsWith('m')) || (genderInput.includes('–º—É–∂'))
      ? 'M'
      : 'F';
    ctx.wizard.state.data.gender = gender;
    ctx.reply('‚öñÔ∏è –í–∞—à –≤–µ—Å (–∫–≥):', Markup.removeKeyboard());
    return ctx.wizard.next();
  },
  // 4. –†–æ—Å—Ç
  (ctx) => {
    const weight = parseFloat(ctx.message.text.replace(',', '.'));
    if (isNaN(weight) || weight <= 0) {
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ).');
      return;
    }
    ctx.wizard.state.data.weight = weight;
    ctx.reply('üìè –í–∞—à —Ä–æ—Å—Ç (—Å–º):');
    return ctx.wizard.next();
  },
  // 5. –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  (ctx) => {
    const height = parseInt(ctx.message.text);
    if (isNaN(height) || height <= 0) {
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—Å–º, —á–∏—Å–ª–æ).');
      return;
    }
    ctx.wizard.state.data.height = height;
    ctx.reply('ü§∏ –£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', Markup.keyboard([
      ['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π']
    ]).resize().oneTime());
    return ctx.wizard.next();
  },
  // 6. –¶–µ–ª—å
  (ctx) => {
    const activity = ctx.message.text.toLowerCase();
    if (!['–Ω–∏–∑–∫–∏–π','—Å—Ä–µ–¥–Ω–∏–π','–≤—ã—Å–æ–∫–∏–π'].includes(activity)) {
      ctx.reply('–£–∫–∞–∂–∏—Ç–µ: –Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π.');
      return;
    }
    ctx.wizard.state.data.activity = activity;
    ctx.reply('ü•Ö –í–∞—à–∞ —Ü–µ–ª—å:', Markup.keyboard([
      ['—Å–±—Ä–æ—Å –≤–µ—Å–∞', '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ', '–Ω–∞–±–æ—Ä –≤–µ—Å–∞']
    ]).resize().oneTime());
    return ctx.wizard.next();
  },
  // 7. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  async (ctx) => {
    const goalInput = ctx.message.text.toLowerCase();
    let goal = 'maintain';
    if (goalInput.includes('—Å–±—Ä–æ—Å')) goal = 'lose';
    else if (goalInput.includes('–Ω–∞–±–æ—Ä')) goal = 'gain';

    ctx.wizard.state.data.goal = goal;

    const { age, gender, weight, height, activity } = ctx.wizard.state.data;
    // –†–∞—Å—á—ë—Ç BMR
    const bmr = calculateBMR({ weight, height, age, gender });
    const tdee = bmr * activityFactor(activity);
    const dailyCalories = adjustCaloriesForGoal(tdee, goal);
    const macros = calculateMacros(dailyCalories);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    const telegramId = ctx.from.id;
    await userController.upsertUser({
      telegram_id: telegramId,
      age,
      gender,
      weight,
      height,
      activity,
      goal,
      daily_calories: dailyCalories,
      protein: macros.protein,
      fat: macros.fat,
      carbs: macros.carbs
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    ctx.reply(
      `‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n` +
      `üìä –í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞:\n` +
      `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: <b>${dailyCalories} –∫–∫–∞–ª</b>\n` +
      `‚Ä¢ –ë–µ–ª–∫–∏: <b>${macros.protein} –≥</b>\n` +
      `‚Ä¢ –ñ–∏—Ä—ã: <b>${macros.fat} –≥</b>\n` +
      `‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: <b>${macros.carbs} –≥</b>\n\n` +
      `üçΩÔ∏è –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é!`
    , { parse_mode: 'HTML' }, Markup.removeKeyboard());

    return ctx.scene.leave();
  }
);

module.exports = registerScene;
