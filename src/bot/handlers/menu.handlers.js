const { Markup } = require('telegraf');
const userController = require('../../controllers/userController');
const { createWeeklyMenu, getShoppingListFromMenu } = require('../../controllers/menuController');
const { getRecipeByMealId } = require('../../controllers/recipeController');
const { getMainMenuKeyboard } = require('../../keyboards');
const escapeHtml = require('../../utils/escapeHtml');
const db = require('../../services/db');
const { sendWeeklyMenu } = require('../utils/menuFlow');

async function registerMenuCommands(bot) {
  // /menu command
  bot.command('menu', async (ctx) => {
    const telegramId = ctx.from.id;
    const user = await userController.getUserByTelegramId(telegramId);
    if (!user) {
      return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code> –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.', { parse_mode: 'HTML' });
    }

    await ctx.reply('üçΩÔ∏è –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
    try {
      await sendWeeklyMenu(ctx, user);
    } catch (error) {
      console.error('Error generating menu:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
  });

  // Explicit confirmation flow
  bot.hears('‚úÖ –î–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é', async (ctx) => {
    const telegramId = ctx.from.id;
    const user = await userController.getUserByTelegramId(telegramId);
    if (!user) {
      return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code> –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.', { parse_mode: 'HTML' });
    }
    await ctx.reply('üçΩÔ∏è –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
    try { await sendWeeklyMenu(ctx, user); } catch { await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.'); }
  });

  bot.hears('‚ùå –ù–µ—Ç, –ø–æ–∑–∂–µ', async (ctx) => {
    await ctx.reply('–•–æ—Ä–æ—à–æ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é –ø–æ–∑–∂–µ.', getMainMenuKeyboard());
  });

  // "–ù–æ–≤–æ–µ –º–µ–Ω—é" button
  bot.hears('–ù–æ–≤–æ–µ –º–µ–Ω—é', async (ctx) => {
    const telegramId = ctx.from.id;
    const user = await userController.getUserByTelegramId(telegramId);
    if (!user) {
      return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code> –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.', { parse_mode: 'HTML' });
    }
    await ctx.reply('üçΩÔ∏è –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
    try {
      await sendWeeklyMenu(ctx, user);
    } catch (error) {
      console.error('Error generating menu:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
  });

  // "–ú–æ—ë –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"
  bot.hears('–ú–æ—ë –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é', async (ctx) => {
    const telegramId = ctx.from.id;
    const user = await userController.getUserByTelegramId(telegramId);
    if (!user) {
      return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code> –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.', { parse_mode: 'HTML' });
    }
    const menuRes = await db.query('SELECT id FROM menus WHERE user_id=$1 ORDER BY created_at DESC LIMIT 1', [user.id]);
    if (menuRes.rows.length === 0) {
      return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é.');
    }
    const menuId = menuRes.rows[0].id;
    const dayButtons = [
      [ { text: '–î–µ–Ω—å 1', callback_data: 'day_1' }, { text: '–î–µ–Ω—å 2', callback_data: 'day_2' } ],
      [ { text: '–î–µ–Ω—å 3', callback_data: 'day_3' }, { text: '–î–µ–Ω—å 4', callback_data: 'day_4' } ],
      [ { text: '–î–µ–Ω—å 5', callback_data: 'day_5' }, { text: '–î–µ–Ω—å 6', callback_data: 'day_6' } ],
      [ { text: '–î–µ–Ω—å 7', callback_data: 'day_7' } ],
      [ { text: 'üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data: `shopping_list_${menuId}` } ]
    ];
    await ctx.reply('üìã –í–∞—à–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª—é–¥–∞:', {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: dayButtons }
    });
  });

  // Day selection
  bot.action(/day_(\d+)/, async (ctx) => {
    const day = parseInt(ctx.match[1]);
    const telegramId = ctx.from.id;
    const user = await userController.getUserByTelegramId(telegramId);
    if (!user) return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });

    const menuRes = await db.query('SELECT id FROM menus WHERE user_id=$1 ORDER BY created_at DESC LIMIT 1', [user.id]);
    if (menuRes.rows.length === 0) return ctx.answerCbQuery('–ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', { show_alert: true });
    const menuId = menuRes.rows[0].id;

    const mealsRes = await db.query(
      'SELECT id, day, meal_time, name, calories, protein, fat, carbs, portion_weight FROM meals WHERE menu_id=$1 AND day=$2',
      [menuId, day]
    );
    const dayMeals = mealsRes.rows;
    if (dayMeals.length === 0) return ctx.answerCbQuery('–ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è', { show_alert: true });

    let msg = `üìÖ <b>–î–µ–Ω—å ${day}</b>\n\n`;
    const buttons = [];
    dayMeals.forEach(m => {
      const title = escapeHtml(m.name);
      const mealLabel = m.meal_time === 'breakfast' ? '–ó–∞–≤—Ç—Ä–∞–∫' : m.meal_time === 'lunch' ? '–û–±–µ–¥' : '–£–∂–∏–Ω';
      const macros = escapeHtml(`–ë${m.protein}/–ñ${m.fat}/–£${m.carbs}`);
      const portion = escapeHtml(String(m.portion_weight));
      msg += `üçΩÔ∏è <b>${mealLabel}</b>\n` +
             `‚Ä¢ <b>${title}</b>\n` +
             `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${m.calories} –∫–∫–∞–ª\n` +
             `‚Ä¢ –ë–ñ–£: ${macros}\n` +
             `‚Ä¢ –ü–æ—Ä—Ü–∏—è: ‚âà ${portion} –≥\n\n`;
      buttons.push([{ text: m.name, callback_data: `recipe_${m.id}` }]);
    });
    await ctx.answerCbQuery();
    await ctx.reply(msg, { parse_mode: 'HTML', reply_markup: { inline_keyboard: buttons } });
  });

  // Shopping list
  bot.action(/shopping_list_(\d+)/, async (ctx) => {
    const menuId = ctx.match[1];
    await ctx.answerCbQuery();
    await ctx.reply('üõí –§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
    let mealsFromDb = [];
    const deadline = Date.now() + 120000;
    while (Date.now() < deadline) {
      const res = await db.query('SELECT name, recipe FROM meals WHERE menu_id=$1', [menuId]);
      mealsFromDb = res.rows;
      const total = mealsFromDb.length;
      const ready = mealsFromDb.filter(m => !!m.recipe).length;
      if (total > 0 && ready === total) break;
      await new Promise(r => setTimeout(r, 5000));
    }
    if (mealsFromDb.length === 0) return ctx.reply('–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥.');
    const shoppingList = await getShoppingListFromMenu(mealsFromDb);
    const text = String(shoppingList || '').trim();
    if (!text) return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.');
    const looksLikeJson = /^\s*[\[{]/.test(text);
    const payload = looksLikeJson
      ? `üõí <b>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n<pre>${escapeHtml(text)}</pre>`
      : `üõí <b>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n${text}`;
    await ctx.reply(payload, { parse_mode: 'HTML' });
  });

  // Recipe open
  bot.action(/recipe_(\d+)/, async (ctx) => {
    const mealId = ctx.match[1];
    const meal = await getRecipeByMealId(mealId);
    if (!meal) return ctx.answerCbQuery('–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
    const { ingredients = [], steps = [], cookingTimeMinutes = 0 } = meal.recipe;
    let msg = `üìñ <b>–†–µ—Ü–µ–ø—Ç: ${escapeHtml(meal.name)}</b>\n\n`;
    msg += `ü•ï <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n`;
    ingredients.forEach(ing => { msg += ` ‚Ä¢ ${escapeHtml(ing)}\n`; });
    msg += `\nüë®‚Äçüç≥ <b>–®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b>\n`;
    steps.forEach((step, i) => { msg += `${i + 1}. ${escapeHtml(step)}\n`; });
    msg += `\n‚è± <b>–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b> ~${cookingTimeMinutes} –º–∏–Ω—É—Ç\n`;
    await ctx.answerCbQuery();
    await ctx.reply(msg, { parse_mode: 'HTML' });
  });

  // Generate/no menu actions from inline buttons
  bot.action('generate_new_menu', async (ctx) => {
    await ctx.answerCbQuery();
    const telegramId = ctx.from.id;
    const user = await userController.getUserByTelegramId(telegramId);
    if (!user) return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code> –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.', { parse_mode: 'HTML' });
    await ctx.reply('üçΩÔ∏è –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
    try { await sendWeeklyMenu(ctx, user); } catch { await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.'); }
  });

  bot.action('no_new_menu', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('–•–æ—Ä–æ—à–æ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é –ø–æ–∑–∂–µ.', getMainMenuKeyboard());
  });
}

module.exports = { registerMenuCommands };


