const userController = require('../../controllers/userController');
const { getMainMenuKeyboard } = require('../../keyboards');
const { calculateBMR, activityFactor, adjustCaloriesForGoal, calculateMacros } = require('../../services/macrosService');

const FIELD_NAMES = {
  age: '–≤–æ–∑—Ä–∞—Å—Ç',
  gender: '–ø–æ–ª',
  weight: '–≤–µ—Å',
  height: '—Ä–æ—Å—Ç',
  activity: '—É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
  goal: '—Ü–µ–ª—å'
};

function registerUpdateHandlers(bot) {
  bot.action('update_all', async (ctx) => {
    await ctx.answerCbQuery();
    ctx.reply('üìù –î–∞–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–º –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Ä—è–¥–∫—É.');
    ctx.scene.enter('registerScene');
  });

  bot.action('cancel_update', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', getMainMenuKeyboard());
  });

  bot.action(/update_(age|gender|weight|height|activity|goal)/, async (ctx) => {
    const field = ctx.match[1];
    await ctx.answerCbQuery();
    if (field === 'goal') {
      await ctx.reply('üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:', {
        reply_markup: {
          inline_keyboard: [
            [ { text: '–°–±—Ä–æ—Å –≤–µ—Å–∞', callback_data: 'goal_lose' }, { text: '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ', callback_data: 'goal_maintain' } ],
            [ { text: '–ù–∞–±–æ—Ä –≤–µ—Å–∞', callback_data: 'goal_gain' } ]
          ]
        }
      });
    } else if (field === 'activity') {
      await ctx.reply('üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', {
        reply_markup: {
          inline_keyboard: [
            [ { text: '–ù–∏–∑–∫–∏–π', callback_data: 'activity_low' }, { text: '–°—Ä–µ–¥–Ω–∏–π', callback_data: 'activity_medium' } ],
            [ { text: '–í—ã—Å–æ–∫–∏–π', callback_data: 'activity_high' } ]
          ]
        }
      });
    } else {
      await ctx.reply(`üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ${FIELD_NAMES[field]}:`);
    }
    if (!ctx.session) ctx.session = {};
    ctx.session.updateField = field;
    ctx.session.waitingForUpdate = true;
  });

  bot.action(/goal_(lose|maintain|gain)/, async (ctx) => {
    const goal = ctx.match[1];
    await ctx.answerCbQuery();
    await applyUpdateAndMaybeRecalculate(ctx, { goal });
  });

  bot.action(/activity_(low|medium|high)/, async (ctx) => {
    const map = { low: '–Ω–∏–∑–∫–∏–π', medium: '—Å—Ä–µ–¥–Ω–∏–π', high: '–≤—ã—Å–æ–∫–∏–π' };
    await ctx.answerCbQuery();
    await applyUpdateAndMaybeRecalculate(ctx, { activity_level: map[ctx.match[1]] });
  });

  bot.on('text', async (ctx, next) => {
    if (!ctx.session || !ctx.session.waitingForUpdate || !ctx.session.updateField) return next();
    const field = ctx.session.updateField;
    const value = ctx.message.text.trim();
    let updateData = {};
    switch (field) {
      case 'age': {
        const age = parseInt(value);
        if (isNaN(age) || age <= 0 || age > 120) return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1-120 –ª–µ—Ç).');
        updateData.age = age; break;
      }
      case 'gender': {
        const genderInput = value.toLowerCase();
        if (!['–º','–∂','m','f','–º—É–∂','–∂–µ–Ω','–º—É–∂—Å–∫–æ–π','–∂–µ–Ω—Å–∫–∏–π'].some(g => genderInput.includes(g))) {
          return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ "–ú" (–º—É–∂—Å–∫–æ–π) –∏–ª–∏ "–ñ" (–∂–µ–Ω—Å–∫–∏–π).');
        }
        updateData.gender = (genderInput.includes('–º')) || (genderInput.startsWith('m')) || (genderInput.includes('–º—É–∂')) ? 'M' : 'F';
        break;
      }
      case 'weight': {
        const weight = parseFloat(value.replace(',', '.'));
        if (isNaN(weight) || weight <= 0 || weight > 500) return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (0.1-500 –∫–≥).');
        updateData.weight = weight; break;
      }
      case 'height': {
        const height = parseInt(value);
        if (isNaN(height) || height <= 0 || height > 250) return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (1-250 —Å–º).');
        updateData.height = height; break;
      }
      case 'activity': {
        const activity = value.toLowerCase();
        if (!['–Ω–∏–∑–∫–∏–π','—Å—Ä–µ–¥–Ω–∏–π','–≤—ã—Å–æ–∫–∏–π'].includes(activity)) {
          return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ: –Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π.');
        }
        updateData.activity_level = activity; break;
      }
      case 'goal': {
        const goalInput = value.toLowerCase();
        updateData.goal = goalInput.includes('—Å–±—Ä–æ—Å') ? 'lose' : goalInput.includes('–Ω–∞–±–æ—Ä') ? 'gain' : 'maintain';
        break;
      }
    }
    await applyUpdateAndMaybeRecalculate(ctx, updateData);
  });
}

async function applyUpdateAndMaybeRecalculate(ctx, updateData) {
  try {
    const telegramId = ctx.from.id;
    const user = await userController.getUserByTelegramId(telegramId);
    if (!user) return ctx.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', getMainMenuKeyboard());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    const actualChanges = [];
    if (updateData.age && parseInt(updateData.age) !== parseInt(user.age)) actualChanges.push('–≤–æ–∑—Ä–∞—Å—Ç');
    if (updateData.gender && updateData.gender !== user.gender) actualChanges.push('–ø–æ–ª');
    if (updateData.weight && parseFloat(updateData.weight) !== parseFloat(user.weight)) actualChanges.push('–≤–µ—Å');
    if (updateData.height && parseInt(updateData.height) !== parseInt(user.height)) actualChanges.push('—Ä–æ—Å—Ç');
    if (updateData.activity_level && updateData.activity_level !== user.activity_level) actualChanges.push('—É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    if (updateData.goal && updateData.goal !== user.goal) actualChanges.push('—Ü–µ–ª—å');

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if (actualChanges.length === 0) {
      if (ctx.session) {
        ctx.session.updateField = null;
        ctx.session.waitingForUpdate = false;
      }
      return ctx.reply(
        `‚ÑπÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ –∂–µ —Å–∞–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ.`,
        getMainMenuKeyboard()
      );
    }

    const merged = {
      weight: updateData.weight ?? user.weight,
      height: updateData.height ?? user.height,
      age: updateData.age ?? user.age,
      gender: updateData.gender ?? user.gender,
      activity_level: updateData.activity_level ?? user.activity_level,
      goal: updateData.goal ?? user.goal
    };

    if (!merged.weight || !merged.height || !merged.age || !merged.gender) {
      throw new Error('Missing required data for calculation');
    }

    const bmr = calculateBMR({ weight: merged.weight, height: merged.height, age: merged.age, gender: merged.gender });
    const tdee = bmr * activityFactor(merged.activity_level);
    const dailyCalories = adjustCaloriesForGoal(tdee, merged.goal);
    const macros = calculateMacros(dailyCalories);

    await userController.upsertUser({
      telegram_id: telegramId,
      age: merged.age,
      gender: merged.gender,
      weight: merged.weight,
      height: merged.height,
      activity: merged.activity_level,
      goal: merged.goal,
      daily_calories: dailyCalories,
      protein: macros.protein,
      fat: macros.fat,
      carbs: macros.carbs
    });

    if (ctx.session) {
      ctx.session.updateField = null;
      ctx.session.waitingForUpdate = false;
    }

    const updatedUser = await userController.getUserByTelegramId(telegramId);
    const genderText = updatedUser?.gender ? (updatedUser.gender === 'M' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π') : '‚Äî';
    const activityText = { '–Ω–∏–∑–∫–∏–π': '–ù–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π': '–°—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π': '–í—ã—Å–æ–∫–∏–π' }[updatedUser?.activity_level] || updatedUser?.activity_level || '‚Äî';
    const goalText = { 'lose': '–°–±—Ä–æ—Å –≤–µ—Å–∞', 'maintain': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ', 'gain': '–ù–∞–±–æ—Ä –≤–µ—Å–∞' }[updatedUser?.goal] || updatedUser?.goal || '‚Äî';
    
    await ctx.reply(
      `‚úÖ ${actualChanges.join(', ')} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω${actualChanges.length > 1 ? '—ã' : ''}!\n\n` +
      `üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n` +
      `üë§ –í–æ–∑—Ä–∞—Å—Ç: ${updatedUser?.age ?? '‚Äî'} –ª–µ—Ç\n` +
      `üë• –ü–æ–ª: ${genderText}\n` +
      `‚öñÔ∏è –í–µ—Å: ${updatedUser?.weight ?? '‚Äî'} –∫–≥\n` +
      `üìè –†–æ—Å—Ç: ${updatedUser?.height ?? '‚Äî'} —Å–º\n` +
      `ü§∏ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityText}\n` +
      `ü•Ö –¶–µ–ª—å: ${goalText}\n\n` +
      `üìä –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: ${updatedUser?.daily_calories ?? '‚Äî'} –∫–∫–∞–ª\n` +
      `ü•© –ë–µ–ª–∫–∏: ${updatedUser?.protein ?? '‚Äî'} –≥ | ü•ë –ñ–∏—Ä—ã: ${updatedUser?.fat ?? '‚Äî'} –≥ | üçû –£–≥–ª–µ–≤–æ–¥—ã: ${updatedUser?.carbs ?? '‚Äî'} –≥`,
      { parse_mode: 'HTML' }
    );
    await ctx.reply(
      'üîÑ –•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤?',
      { reply_markup: { inline_keyboard: [[ { text: '‚úÖ –î–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é', callback_data: 'generate_new_menu' }, { text: '‚ùå –ù–µ—Ç, –ø–æ–∑–∂–µ', callback_data: 'no_new_menu' } ]] } }
    );
  } catch (error) {
    console.error('Error updating user data:', error);
    let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    if (error.message === 'Missing required data for calculation') errorMessage = '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏–∫–æ–º.';
    else if (error.message === 'Invalid calculated values') errorMessage = '‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –∫–∞–ª–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏–∫–æ–º.';
    await ctx.reply(errorMessage, getMainMenuKeyboard());
  }
}

module.exports = { registerUpdateHandlers };


