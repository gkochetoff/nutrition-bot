const { Telegraf, session, Scenes } = require('telegraf');
const rateLimit = require('telegraf-ratelimit');
const { BOT_TOKEN } = require('../config');
const registerScene = require('../scenes/registerScene');
const { getMainMenuKeyboard } = require('../keyboards');
const validateUser = require('./middlewares/validateUser');
const { registerMenuCommands } = require('./handlers/menu.handlers');
const { registerUserCommands } = require('./handlers/user.handlers');
const { registerUpdateHandlers } = require('./handlers/update.handlers');

function createBot() {
  if (!BOT_TOKEN) {
    throw new Error('BOT_TOKEN is not set. Please configure environment variables.');
  }
  const bot = new Telegraf(BOT_TOKEN);

  bot.use(rateLimit({
    window: 1000,
    limit: 1,
    onLimitExceeded: (ctx) => ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.')
  }));

  bot.use(async (ctx, next) => {
    try {
      await next();
    } catch (err) {
      console.error('Bot error:', err);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }
  });

  const stage = new Scenes.Stage([ registerScene ]);
  bot.use(session());
  bot.use(stage.middleware());

  // /start
  bot.start(validateUser, async (ctx) => {
    const telegramId = ctx.from.id;
    const userController = require('../controllers/userController');
    const user = await userController.getUserByTelegramId(telegramId);
    if (user) {
      ctx.reply('üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', getMainMenuKeyboard());
    } else {
      ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é.\n\nüìù –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!');
      ctx.scene.enter('registerScene');
    }
  });

  // Feature handlers
  bot.use(validateUser);
  registerMenuCommands(bot);
  registerUserCommands(bot);
  registerUpdateHandlers(bot);

  // Update flows and callbacks kept in original scene/handlers
  return bot;
}

module.exports = createBot;


