const { Telegraf, session, Scenes } = require('telegraf');
const { BOT_TOKEN } = require('./config');
const registerScene = require('./scenes/registerScene');
const userController = require('./controllers/userController');
const { createWeeklyMenu, getShoppingListFromMenu } = require('./controllers/menuController');
const { getRecipeByMealId } = require('./controllers/recipeController');
const { getMainMenuKeyboard } = require('./keyboards');
const escapeMd = require('./utils/escapeMarkdown');
const escapeHtml = require('./utils/escapeHtml');
const rateLimit = require('telegraf-ratelimit');
const db = require('./services/db');

// –û–±—â–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const FIELD_NAMES = {
  age: '–≤–æ–∑—Ä–∞—Å—Ç',
  gender: '–ø–æ–ª',
  weight: '–≤–µ—Å',
  height: '—Ä–æ—Å—Ç',
  activity: '—É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
  goal: '—Ü–µ–ª—å'
};

console.log('Initializing bot with token:', BOT_TOKEN ? 'Token exists' : 'Token missing');
if (!BOT_TOKEN) {
  throw new Error('BOT_TOKEN is not set. Please configure environment variables.');
}
const bot = new Telegraf(BOT_TOKEN);

// Rate limiting middleware
bot.use(rateLimit({
  window: 1000, // 1 second
  limit: 1, // 1 message per second
  onLimitExceeded: (ctx) => ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.')
}));

// Error handling middleware
bot.use(async (ctx, next) => {
  try {
    console.log('Processing message from user:', ctx.from?.id);
    await next();
  } catch (err) {
    console.error('Bot error:', err);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  }
});

// –°—Ü–µ–Ω—ã
console.log('Setting up scenes...');
const stage = new Scenes.Stage([ registerScene ]);
bot.use(session());
bot.use(stage.middleware());

// Input validation middleware
const validateUser = async (ctx, next) => {
  if (!ctx.from || !ctx.from.id) {
    console.error('User validation failed: missing user data');
    return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }
  console.log('User validated:', ctx.from.id);
  return next();
};

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(validateUser, async (ctx) => {
  console.log('Start command received from user:', ctx.from.id);
  const telegramId = ctx.from.id;
  const user = await userController.getUserByTelegramId(telegramId);
  
  if (user) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    ctx.reply(
      'üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
      getMainMenuKeyboard()
    );
  } else {
    // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é.\n\nüìù –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!');
  ctx.scene.enter('registerScene');
  }
});

// –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã /menu
bot.command('menu', validateUser, async (ctx) => {
  console.log('Menu command received from user:', ctx.from.id);
  const telegramId = ctx.from.id;
  const user = await userController.getUserByTelegramId(telegramId);
  if (!user) {
    console.log('User not found:', telegramId);
    return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code> –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.', { parse_mode: 'HTML' });
  }

  console.log('Generating menu for user:', telegramId);
  await ctx.reply('üçΩÔ∏è –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
  
  try {
    console.log('Creating weekly menu...');
    const { menuId, meals } = await createWeeklyMenu(
      user.id,
      user.daily_calories,
      user.protein,
      user.fat,
      user.carbs,
      user.goal
    );
    console.log('Menu created successfully, menuId:', menuId);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º menuId –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
    if (!ctx.session) ctx.session = {};
    ctx.session.currentMenuId = menuId;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    const dayButtons = [
      [
        { text: '–î–µ–Ω—å 1', callback_data: 'day_1' },
        { text: '–î–µ–Ω—å 2', callback_data: 'day_2' }
      ],
      [
        { text: '–î–µ–Ω—å 3', callback_data: 'day_3' },
        { text: '–î–µ–Ω—å 4', callback_data: 'day_4' }
      ],
      [
        { text: '–î–µ–Ω—å 5', callback_data: 'day_5' },
        { text: '–î–µ–Ω—å 6', callback_data: 'day_6' }
      ],
      [
        { text: '–î–µ–Ω—å 7', callback_data: 'day_7' }
      ],
      [
        { text: 'üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data: `shopping_list_${menuId}` }
      ]
    ];

    await bot.telegram.sendMessage(
      telegramId,
      '‚úÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª—é–¥–∞:',
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: dayButtons
        }
      }
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await bot.telegram.sendMessage(telegramId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:', getMainMenuKeyboard());

    console.log('Menu generation completed successfully');

  } catch (error) {
    console.error('Error generating menu:', error);
    await bot.telegram.sendMessage(telegramId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏"
bot.hears('–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏', validateUser, async (ctx) => {
  console.log('Recalculate command received from user:', ctx.from.id);

  const telegramId = ctx.from.id;
  const user = await userController.getUserByTelegramId(telegramId);

  if (!user) {
    ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code> –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.', { parse_mode: 'HTML' });
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å
  const genderText = user?.gender ? (user.gender === 'M' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π') : '‚Äî';
  const activityText = {
    '–Ω–∏–∑–∫–∏–π': '–ù–∏–∑–∫–∏–π',
    '—Å—Ä–µ–¥–Ω–∏–π': '–°—Ä–µ–¥–Ω–∏–π',
    '–≤—ã—Å–æ–∫–∏–π': '–í—ã—Å–æ–∫–∏–π'
  }[user?.activity_level] || user?.activity_level || '‚Äî';

  const goalText = {
    'lose': '–°–±—Ä–æ—Å –≤–µ—Å–∞',
    'maintain': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ',
    'gain': '–ù–∞–±–æ—Ä –≤–µ—Å–∞'
  }[user?.goal] || user?.goal || '‚Äî';

  await ctx.reply(
    `üìã –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n` +
    `üë§ –í–æ–∑—Ä–∞—Å—Ç: ${user?.age ?? '‚Äî'} –ª–µ—Ç\n` +
    `üë• –ü–æ–ª: ${genderText}\n` +
    `‚öñÔ∏è –í–µ—Å: ${user?.weight ?? '‚Äî'} –∫–≥\n` +
    `üìè –†–æ—Å—Ç: ${user?.height ?? '‚Äî'} —Å–º\n` +
    `ü§∏ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityText}\n` +
    `ü•Ö –¶–µ–ª—å: ${goalText}\n\n` +
    `üìä –¢–µ–∫—É—â–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: ${user?.daily_calories ?? '‚Äî'} –∫–∫–∞–ª\n` +
    `ü•© –ë–µ–ª–∫–∏: ${user?.protein ?? '‚Äî'} –≥ | ü•ë –ñ–∏—Ä—ã: ${user?.fat ?? '‚Äî'} –≥ | üçû –£–≥–ª–µ–≤–æ–¥—ã: ${user?.carbs ?? '‚Äî'} –≥\n\n` +
    `–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`,
    {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üë§ –í–æ–∑—Ä–∞—Å—Ç', callback_data: 'update_age' },
            { text: 'üë• –ü–æ–ª', callback_data: 'update_gender' }
          ],
          [
            { text: '‚öñÔ∏è –í–µ—Å', callback_data: 'update_weight' },
            { text: 'üìè –†–æ—Å—Ç', callback_data: 'update_height' }
          ],
          [
            { text: 'ü§∏ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', callback_data: 'update_activity' },
            { text: 'ü•Ö –¶–µ–ª—å', callback_data: 'update_goal' }
          ],
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ', callback_data: 'update_all' }
          ],
          [
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_update' }
          ]
        ]
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é"
bot.hears('‚úÖ –î–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é', validateUser, async (ctx) => {
  console.log('Generate new menu confirmed by user:', ctx.from.id);
  const telegramId = ctx.from.id;
  const user = await userController.getUserByTelegramId(telegramId);
  if (!user) {
    return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code> –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.', { parse_mode: 'HTML' });
  }

  await ctx.reply('üçΩÔ∏è –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
  
  try {
    console.log('Creating weekly menu...');
    const { menuId, meals } = await createWeeklyMenu(
      user.id,
      user.daily_calories,
      user.protein,
      user.fat,
      user.carbs,
      user.goal
    );
    console.log('Menu created successfully, menuId:', menuId);

    if (!ctx.session) ctx.session = {};
    ctx.session.currentMenuId = menuId;

    const dayButtons = [
      [
        { text: '–î–µ–Ω—å 1', callback_data: 'day_1' },
        { text: '–î–µ–Ω—å 2', callback_data: 'day_2' }
      ],
      [
        { text: '–î–µ–Ω—å 3', callback_data: 'day_3' },
        { text: '–î–µ–Ω—å 4', callback_data: 'day_4' }
      ],
      [
        { text: '–î–µ–Ω—å 5', callback_data: 'day_5' },
        { text: '–î–µ–Ω—å 6', callback_data: 'day_6' }
      ],
      [
        { text: '–î–µ–Ω—å 7', callback_data: 'day_7' }
      ],
      [
        { text: 'üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data: `shopping_list_${menuId}` }
      ]
    ];

    await ctx.reply(
      '‚úÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª—é–¥–∞:',
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: dayButtons
        }
      }
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:', getMainMenuKeyboard());

    console.log('Menu generation completed successfully');
  } catch (error) {
    console.error('Error generating menu:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç, –ø–æ–∑–∂–µ"
bot.hears('‚ùå –ù–µ—Ç, –ø–æ–∑–∂–µ', validateUser, async (ctx) => {
  console.log('Generate new menu declined by user:', ctx.from.id);
  await ctx.reply(
    '–•–æ—Ä–æ—à–æ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é –ø–æ–∑–∂–µ.',
    getMainMenuKeyboard()
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é" (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
bot.action('generate_new_menu', validateUser, async (ctx) => {
  await ctx.answerCbQuery();
  console.log('Generate new menu confirmed by user:', ctx.from.id);

  const telegramId = ctx.from.id;
  const user = await userController.getUserByTelegramId(telegramId);
  if (!user) {
    return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code> –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.', { parse_mode: 'HTML' });
  }

  await ctx.reply('üçΩÔ∏è –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');

  try {
    console.log('Creating weekly menu...');
    const { menuId, meals } = await createWeeklyMenu(
      user.id,
      user.daily_calories,
      user.protein,
      user.fat,
      user.carbs,
      user.goal
    );
    console.log('Menu created successfully, menuId:', menuId);

    if (!ctx.session) ctx.session = {};
    ctx.session.currentMenuId = menuId;

    const dayButtons = [
      [
        { text: '–î–µ–Ω—å 1', callback_data: 'day_1' },
        { text: '–î–µ–Ω—å 2', callback_data: 'day_2' }
      ],
      [
        { text: '–î–µ–Ω—å 3', callback_data: 'day_3' },
        { text: '–î–µ–Ω—å 4', callback_data: 'day_4' }
      ],
      [
        { text: '–î–µ–Ω—å 5', callback_data: 'day_5' },
        { text: '–î–µ–Ω—å 6', callback_data: 'day_6' }
      ],
      [
        { text: '–î–µ–Ω—å 7', callback_data: 'day_7' }
      ],
      [
        { text: 'üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data: `shopping_list_${menuId}` }
      ]
    ];

    await ctx.reply(
      '‚úÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª—é–¥–∞:',
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: dayButtons
        }
      }
    );

    await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:', getMainMenuKeyboard());

    console.log('Menu generation completed successfully');
  } catch (error) {
    console.error('Error generating menu:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç, –ø–æ–∑–∂–µ" (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
bot.action('no_new_menu', validateUser, async (ctx) => {
  await ctx.answerCbQuery();
  console.log('Generate new menu declined by user:', ctx.from.id);
  await ctx.reply(
    '–•–æ—Ä–æ—à–æ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é –ø–æ–∑–∂–µ.',
    getMainMenuKeyboard()
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
bot.action(/update_(age|gender|weight|height|activity|goal)/, validateUser, async (ctx) => {
  const field = ctx.match[1];
  const fieldNames = FIELD_NAMES;

  await ctx.answerCbQuery();

  // –î–ª—è —Ü–µ–ª–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
  if (field === 'goal') {
    await ctx.reply('üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–°–±—Ä–æ—Å –≤–µ—Å–∞', callback_data: 'goal_lose' },
            { text: '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ', callback_data: 'goal_maintain' }
          ],
          [
            { text: '–ù–∞–±–æ—Ä –≤–µ—Å–∞', callback_data: 'goal_gain' }
          ]
        ]
      }
    });
  } else if (field === 'activity') {
    await ctx.reply('üìù –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–ù–∏–∑–∫–∏–π', callback_data: 'activity_low' },
            { text: '–°—Ä–µ–¥–Ω–∏–π', callback_data: 'activity_medium' }
          ],
          [
            { text: '–í—ã—Å–æ–∫–∏–π', callback_data: 'activity_high' }
          ]
        ]
      }
    });
  } else {
    await ctx.reply(`üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ${fieldNames[field]}:`);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
  if (!ctx.session) ctx.session = {};
  ctx.session.updateField = field;
  ctx.session.waitingForUpdate = true;
});

bot.action('update_all', validateUser, async (ctx) => {
  await ctx.answerCbQuery();
  ctx.reply('üìù –î–∞–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–º –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Ä—è–¥–∫—É.');
  ctx.scene.enter('registerScene');
});

bot.action('cancel_update', validateUser, async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', getMainMenuKeyboard());
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
bot.action(/goal_(lose|maintain|gain)/, validateUser, async (ctx) => {
  const goal = ctx.match[1];
  const field = 'goal';
  const fieldNames = FIELD_NAMES;
  let updateData = {};
  let needsRecalculation = false;

  try {
    await ctx.answerCbQuery();
    
    const telegramId = ctx.from.id;
    const user = await userController.getUserByTelegramId(telegramId);

    if (!user) {
      await ctx.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', getMainMenuKeyboard());
      return;
    }

    updateData.goal = goal;
    needsRecalculation = true;

    // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –ø–µ—Ä–µ—Å—á–µ—Ç—ã –∫–∞–ª–æ—Ä–∏–π
    const { calculateBMR, activityFactor, adjustCaloriesForGoal, calculateMacros } = require('./services/macrosService');

    const currentData = {
      weight: updateData.weight || user.weight,
      height: updateData.height || user.height,
      age: updateData.age || user.age,
      gender: updateData.gender || user.gender,
      activity_level: updateData.activity_level || user.activity_level,
      goal: updateData.goal || user.goal
    };

    console.log('Calculating with data:', currentData);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (!currentData.weight || !currentData.height || !currentData.age || !currentData.gender) {
      console.error('Missing required data:', {
        weight: currentData.weight,
        height: currentData.height,
        age: currentData.age,
        gender: currentData.gender
      });
      throw new Error('Missing required data for calculation');
    }

    try {
      console.log('Starting calculation...');
      const bmr = calculateBMR(currentData);
      console.log('BMR calculated:', bmr);
      
      const tdee = bmr * activityFactor(currentData.activity_level);
      console.log('TDEE calculated:', tdee);
      
      const dailyCalories = adjustCaloriesForGoal(tdee, currentData.goal);
      console.log('Daily calories calculated:', dailyCalories);
      
      const macros = calculateMacros(dailyCalories);
      console.log('Macros calculated:', macros);

      console.log('Calculated values:', { bmr, tdee, dailyCalories, macros });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
      if (!dailyCalories || !macros.protein || !macros.fat || !macros.carbs ||
          isNaN(dailyCalories) || isNaN(macros.protein) || isNaN(macros.fat) || isNaN(macros.carbs)) {
        console.error('Invalid calculated values:', { dailyCalories, macros });
        throw new Error('Invalid calculated values');
      }

      console.log('Updating user in database...');
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
      await userController.upsertUser({
        telegram_id: telegramId,
        age: currentData.age,
        gender: currentData.gender,
        weight: currentData.weight,
        height: currentData.height,
        activity: currentData.activity_level,
        goal: currentData.goal,
        daily_calories: dailyCalories,
        protein: macros.protein,
        fat: macros.fat,
        carbs: macros.carbs
      });

      console.log('User data updated successfully');
    } catch (calcError) {
      console.error('Error in calculation:', calcError);
      console.error('Error stack:', calcError.stack);
      throw calcError;
    }

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session.updateField = null;
    ctx.session.waitingForUpdate = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    const updatedUser = await userController.getUserByTelegramId(telegramId);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–º—É —Ç–∏–ø—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    let actualChanges = [];
    if (updateData.goal && updateData.goal !== user.goal) actualChanges.push('—Ü–µ–ª—å');

    if (actualChanges.length > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      const genderText = updatedUser?.gender ? (updatedUser.gender === 'M' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π') : '‚Äî';
      const activityText = {
        '–Ω–∏–∑–∫–∏–π': '–ù–∏–∑–∫–∏–π',
        '—Å—Ä–µ–¥–Ω–∏–π': '–°—Ä–µ–¥–Ω–∏–π',
        '–≤—ã—Å–æ–∫–∏–π': '–í—ã—Å–æ–∫–∏–π'
      }[updatedUser?.activity_level] || updatedUser?.activity_level || '‚Äî';

      const goalText = {
        'lose': '–°–±—Ä–æ—Å –≤–µ—Å–∞',
        'maintain': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ',
        'gain': '–ù–∞–±–æ—Ä –≤–µ—Å–∞'
      }[updatedUser?.goal] || updatedUser?.goal || '‚Äî';

      await ctx.reply(
        `‚úÖ ${actualChanges.join(', ')} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω${actualChanges.length > 1 ? '—ã' : ''}!\n\n` +
        `üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n` +
        `üë§ –í–æ–∑—Ä–∞—Å—Ç: ${updatedUser?.age ?? '‚Äî'} –ª–µ—Ç\n` +
        `üë• –ü–æ–ª: ${genderText}\n` +
        `‚öñÔ∏è –í–µ—Å: ${updatedUser?.weight ?? '‚Äî'} –∫–≥\n` +
        `üìè –†–æ—Å—Ç: ${updatedUser?.height ?? '‚Äî'} —Å–º\n` +
        `ü§∏ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityText}\n` +
        `ü•Ö –¶–µ–ª—å: ${goalText}\n\n` +
        `üìä –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: ${updatedUser?.daily_calories ?? '‚Äî'} –∫–∫–∞–ª\n` +
        `ü•© –ë–µ–ª–∫–∏: ${updatedUser?.protein ?? '‚Äî'} –≥ | ü•ë –ñ–∏—Ä—ã: ${updatedUser?.fat ?? '‚Äî'} –≥ | üçû –£–≥–ª–µ–≤–æ–¥—ã: ${updatedUser?.carbs ?? '‚Äî'} –≥`,
        { parse_mode: 'HTML' }
      );

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é
      await ctx.reply(
        'üîÑ –•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤?',
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –î–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é', callback_data: 'generate_new_menu' },
                { text: '‚ùå –ù–µ—Ç, –ø–æ–∑–∂–µ', callback_data: 'no_new_menu' }
              ]
            ]
          }
        }
      );
    } else {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
      await ctx.reply(
        `‚ÑπÔ∏è ${fieldNames[field]} –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ. –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ.`,
        getMainMenuKeyboard()
      );
    }

  } catch (error) {
    console.error('Error updating user data:', error);
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    console.error('Field:', field, 'Goal:', goal);

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    ctx.session.updateField = null;
    ctx.session.waitingForUpdate = false;

    let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    if (error.message === 'Missing required data for calculation') {
      errorMessage = '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏–∫–æ–º.';
    } else if (error.message === 'Invalid calculated values') {
      errorMessage = '‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –∫–∞–ª–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏–∫–æ–º.';
    }

    await ctx.reply(errorMessage, getMainMenuKeyboard());
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
bot.action(/activity_(low|medium|high)/, validateUser, async (ctx) => {
  const activityMap = {
    'low': '–Ω–∏–∑–∫–∏–π',
    'medium': '—Å—Ä–µ–¥–Ω–∏–π', 
    'high': '–≤—ã—Å–æ–∫–∏–π'
  };
  const activity = activityMap[ctx.match[1]];
  const field = 'activity';
  const fieldNames = FIELD_NAMES;
  let updateData = {};
  let needsRecalculation = false;

  try {
    await ctx.answerCbQuery();
    
    const telegramId = ctx.from.id;
    const user = await userController.getUserByTelegramId(telegramId);

    if (!user) {
      await ctx.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', getMainMenuKeyboard());
      return;
    }

    updateData.activity_level = activity;
    needsRecalculation = true;

    // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –ø–µ—Ä–µ—Å—á–µ—Ç—ã –∫–∞–ª–æ—Ä–∏–π
    const { calculateBMR, activityFactor, adjustCaloriesForGoal, calculateMacros } = require('./services/macrosService');

    const currentData = {
      weight: updateData.weight || user.weight,
      height: updateData.height || user.height,
      age: updateData.age || user.age,
      gender: updateData.gender || user.gender,
      activity_level: updateData.activity_level || user.activity_level,
      goal: updateData.goal || user.goal
    };

    console.log('Calculating with data:', currentData);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (!currentData.weight || !currentData.height || !currentData.age || !currentData.gender) {
      console.error('Missing required data:', {
        weight: currentData.weight,
        height: currentData.height,
        age: currentData.age,
        gender: currentData.gender
      });
      throw new Error('Missing required data for calculation');
    }

    try {
      console.log('Starting calculation...');
      const bmr = calculateBMR(currentData);
      console.log('BMR calculated:', bmr);
      
      const tdee = bmr * activityFactor(currentData.activity_level);
      console.log('TDEE calculated:', tdee);
      
      const dailyCalories = adjustCaloriesForGoal(tdee, currentData.goal);
      console.log('Daily calories calculated:', dailyCalories);
      
      const macros = calculateMacros(dailyCalories);
      console.log('Macros calculated:', macros);

      console.log('Calculated values:', { bmr, tdee, dailyCalories, macros });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
      if (!dailyCalories || !macros.protein || !macros.fat || !macros.carbs ||
          isNaN(dailyCalories) || isNaN(macros.protein) || isNaN(macros.fat) || isNaN(macros.carbs)) {
        console.error('Invalid calculated values:', { dailyCalories, macros });
        throw new Error('Invalid calculated values');
      }

      console.log('Updating user in database...');
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
      await userController.upsertUser({
        telegram_id: telegramId,
        age: currentData.age,
        gender: currentData.gender,
        weight: currentData.weight,
        height: currentData.height,
        activity: currentData.activity_level,
        goal: currentData.goal,
        daily_calories: dailyCalories,
        protein: macros.protein,
        fat: macros.fat,
        carbs: macros.carbs
      });

      console.log('User data updated successfully');
    } catch (calcError) {
      console.error('Error in calculation:', calcError);
      console.error('Error stack:', calcError.stack);
      throw calcError;
    }

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session.updateField = null;
    ctx.session.waitingForUpdate = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    const updatedUser = await userController.getUserByTelegramId(telegramId);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–º—É —Ç–∏–ø—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    let actualChanges = [];
    if (updateData.activity_level && updateData.activity_level !== user.activity_level) actualChanges.push('—É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');

    if (actualChanges.length > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      const genderText = updatedUser?.gender ? (updatedUser.gender === 'M' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π') : '‚Äî';
      const activityText = {
        '–Ω–∏–∑–∫–∏–π': '–ù–∏–∑–∫–∏–π',
        '—Å—Ä–µ–¥–Ω–∏–π': '–°—Ä–µ–¥–Ω–∏–π',
        '–≤—ã—Å–æ–∫–∏–π': '–í—ã—Å–æ–∫–∏–π'
      }[updatedUser?.activity_level] || updatedUser?.activity_level || '‚Äî';

      const goalText = {
        'lose': '–°–±—Ä–æ—Å –≤–µ—Å–∞',
        'maintain': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ',
        'gain': '–ù–∞–±–æ—Ä –≤–µ—Å–∞'
      }[updatedUser?.goal] || updatedUser?.goal || '‚Äî';

      await ctx.reply(
        `‚úÖ ${actualChanges.join(', ')} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω${actualChanges.length > 1 ? '—ã' : ''}!\n\n` +
        `üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n` +
        `üë§ –í–æ–∑—Ä–∞—Å—Ç: ${updatedUser?.age ?? '‚Äî'} –ª–µ—Ç\n` +
        `üë• –ü–æ–ª: ${genderText}\n` +
        `‚öñÔ∏è –í–µ—Å: ${updatedUser?.weight ?? '‚Äî'} –∫–≥\n` +
        `üìè –†–æ—Å—Ç: ${updatedUser?.height ?? '‚Äî'} —Å–º\n` +
        `ü§∏ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityText}\n` +
        `ü•Ö –¶–µ–ª—å: ${goalText}\n\n` +
        `üìä –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: ${updatedUser?.daily_calories ?? '‚Äî'} –∫–∫–∞–ª\n` +
        `ü•© –ë–µ–ª–∫–∏: ${updatedUser?.protein ?? '‚Äî'} –≥ | ü•ë –ñ–∏—Ä—ã: ${updatedUser?.fat ?? '‚Äî'} –≥ | üçû –£–≥–ª–µ–≤–æ–¥—ã: ${updatedUser?.carbs ?? '‚Äî'} –≥`,
        { parse_mode: 'HTML' }
      );

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é
      await ctx.reply(
        'üîÑ –•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤?',
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –î–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é', callback_data: 'generate_new_menu' },
                { text: '‚ùå –ù–µ—Ç, –ø–æ–∑–∂–µ', callback_data: 'no_new_menu' }
              ]
            ]
          }
        }
      );
    } else {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
      await ctx.reply(
        `‚ÑπÔ∏è ${fieldNames[field]} –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ. –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ.`,
        getMainMenuKeyboard()
      );
    }

  } catch (error) {
    console.error('Error updating user data:', error);
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    console.error('Field:', field, 'Activity:', activity);

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    ctx.session.updateField = null;
    ctx.session.waitingForUpdate = false;

    let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    if (error.message === 'Missing required data for calculation') {
      errorMessage = '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏–∫–æ–º.';
    } else if (error.message === 'Invalid calculated values') {
      errorMessage = '‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –∫–∞–ª–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏–∫–æ–º.';
    }

    await ctx.reply(errorMessage, getMainMenuKeyboard());
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
bot.on('text', validateUser, async (ctx, next) => {
  if (!ctx.session || !ctx.session.waitingForUpdate || !ctx.session.updateField) {
    return next(); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ –∫ –¥—Ä—É–≥–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, hears)
  }

  const field = ctx.session.updateField;
  const value = ctx.message.text.trim();
  const fieldNames = FIELD_NAMES;
  let updateData = {};
  let needsRecalculation = false;

  try {
    const telegramId = ctx.from.id;
    const user = await userController.getUserByTelegramId(telegramId);

    if (!user) {
      await ctx.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', getMainMenuKeyboard());
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è

    switch (field) {
      case 'age':
        const age = parseInt(value);
        if (isNaN(age) || age <= 0 || age > 120) {
          await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1-120 –ª–µ—Ç).');
          return;
        }
        updateData.age = age;
        needsRecalculation = true;
        break;

      case 'gender':
        const genderInput = value.toLowerCase();
        if (!['–º','–∂','m','f','–º—É–∂','–∂–µ–Ω','–º—É–∂—Å–∫–æ–π','–∂–µ–Ω—Å–∫–∏–π'].some(g => genderInput.includes(g))) {
          await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ "–ú" (–º—É–∂—Å–∫–æ–π) –∏–ª–∏ "–ñ" (–∂–µ–Ω—Å–∫–∏–π).');
          return;
        }
        const gender = (genderInput.includes('–º')) || (genderInput.startsWith('m')) || (genderInput.includes('–º—É–∂'))
          ? 'M'
          : 'F';
        updateData.gender = gender;
        needsRecalculation = true;
        break;

      case 'weight':
        const weight = parseFloat(value.replace(',', '.'));
        if (isNaN(weight) || weight <= 0 || weight > 500) {
          await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (0.1-500 –∫–≥).');
          return;
        }
        updateData.weight = weight;
        needsRecalculation = true;
        break;

      case 'height':
        const height = parseInt(value);
        if (isNaN(height) || height <= 0 || height > 250) {
          await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (1-250 —Å–º).');
          return;
        }
        updateData.height = height;
        needsRecalculation = true;
        break;

      case 'activity':
        const activity = value.toLowerCase();
        if (!['–Ω–∏–∑–∫–∏–π','—Å—Ä–µ–¥–Ω–∏–π','–≤—ã—Å–æ–∫–∏–π'].includes(activity)) {
          await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ: –Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π.', {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '–ù–∏–∑–∫–∏–π', callback_data: 'activity_low' },
                  { text: '–°—Ä–µ–¥–Ω–∏–π', callback_data: 'activity_medium' }
                ],
                [
                  { text: '–í—ã—Å–æ–∫–∏–π', callback_data: 'activity_high' }
                ]
              ]
            }
          });
          return;
        }
        updateData.activity_level = activity;
        needsRecalculation = true;
        break;

      case 'goal':
        const goalInput = value.toLowerCase();
        let goal = 'maintain';
        if (goalInput.includes('—Å–±—Ä–æ—Å')) goal = 'lose';
        else if (goalInput.includes('–Ω–∞–±–æ—Ä')) goal = 'gain';

        if (!['lose', 'maintain', 'gain'].includes(goal)) {
          await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å: —Å–±—Ä–æ—Å –≤–µ—Å–∞, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–±–æ—Ä –≤–µ—Å–∞.', {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '–°–±—Ä–æ—Å –≤–µ—Å–∞', callback_data: 'goal_lose' },
                  { text: '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ', callback_data: 'goal_maintain' }
                ],
                [
                  { text: '–ù–∞–±–æ—Ä –≤–µ—Å–∞', callback_data: 'goal_gain' }
                ]
              ]
            }
          });
          return;
        }
        updateData.goal = goal;
        needsRecalculation = true;
        break;
    }

    // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –ø–µ—Ä–µ—Å—á–µ—Ç—ã –∫–∞–ª–æ—Ä–∏–π
    if (needsRecalculation) {
      const { calculateBMR, activityFactor, adjustCaloriesForGoal, calculateMacros } = require('./services/macrosService');

      const currentData = {
        weight: updateData.weight || user.weight,
        height: updateData.height || user.height,
        age: updateData.age || user.age,
        gender: updateData.gender || user.gender,
        activity_level: updateData.activity_level || user.activity_level,
        goal: updateData.goal || user.goal
      };

      console.log('Calculating with data:', currentData);
      console.log('User data:', user);
      console.log('Update data:', updateData);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
      if (!currentData.weight || !currentData.height || !currentData.age || !currentData.gender) {
        console.error('Missing required data:', {
          weight: currentData.weight,
          height: currentData.height,
          age: currentData.age,
          gender: currentData.gender
        });
        throw new Error('Missing required data for calculation');
      }

      try {
        console.log('Starting calculation...');
        const bmr = calculateBMR(currentData);
        console.log('BMR calculated:', bmr);
        
        const tdee = bmr * activityFactor(currentData.activity_level);
        console.log('TDEE calculated:', tdee);
        
        const dailyCalories = adjustCaloriesForGoal(tdee, currentData.goal);
        console.log('Daily calories calculated:', dailyCalories);
        
        const macros = calculateMacros(dailyCalories);
        console.log('Macros calculated:', macros);

        console.log('Calculated values:', { bmr, tdee, dailyCalories, macros });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        if (!dailyCalories || !macros.protein || !macros.fat || !macros.carbs ||
            isNaN(dailyCalories) || isNaN(macros.protein) || isNaN(macros.fat) || isNaN(macros.carbs)) {
          console.error('Invalid calculated values:', { dailyCalories, macros });
          throw new Error('Invalid calculated values');
        }

        console.log('Updating user in database...');
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
        await userController.upsertUser({
          telegram_id: telegramId,
          age: currentData.age,
          gender: currentData.gender,
          weight: currentData.weight,
          height: currentData.height,
          activity: currentData.activity_level,
          goal: currentData.goal,
          daily_calories: dailyCalories,
          protein: macros.protein,
          fat: macros.fat,
          carbs: macros.carbs
        });

        console.log('User data updated successfully');
      } catch (calcError) {
        console.error('Error in calculation:', calcError);
        console.error('Error stack:', calcError.stack);
        throw calcError;
      }
    } else {
      console.log('No recalculation needed, updating data only...');
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
      await userController.upsertUser({
        telegram_id: telegramId,
        age: user.age,
        gender: user.gender,
        weight: user.weight,
        height: user.height,
        activity: user.activity_level,
        goal: user.goal,
        daily_calories: user.daily_calories,
        protein: user.protein,
        fat: user.fat,
        carbs: user.carbs,
        ...updateData
      });
      console.log('Data updated without recalculation');
    }

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session.updateField = null;
    ctx.session.waitingForUpdate = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    const updatedUser = await userController.getUserByTelegramId(telegramId);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–º—É —Ç–∏–ø—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    let actualChanges = [];
    if (updateData.age && parseInt(updateData.age) !== parseInt(user.age)) actualChanges.push('–≤–æ–∑—Ä–∞—Å—Ç');
    if (updateData.gender && updateData.gender !== user.gender) actualChanges.push('–ø–æ–ª');
    if (updateData.weight && parseFloat(updateData.weight) !== parseFloat(user.weight)) actualChanges.push('–≤–µ—Å');
    if (updateData.height && parseInt(updateData.height) !== parseInt(user.height)) actualChanges.push('—Ä–æ—Å—Ç');
    if (updateData.activity_level && updateData.activity_level !== user.activity_level) actualChanges.push('—É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    if (updateData.goal && updateData.goal !== user.goal) actualChanges.push('—Ü–µ–ª—å');

    if (actualChanges.length > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      const genderText = updatedUser?.gender ? (updatedUser.gender === 'M' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π') : '‚Äî';
      const activityText = {
        '–Ω–∏–∑–∫–∏–π': '–ù–∏–∑–∫–∏–π',
        '—Å—Ä–µ–¥–Ω–∏–π': '–°—Ä–µ–¥–Ω–∏–π',
        '–≤—ã—Å–æ–∫–∏–π': '–í—ã—Å–æ–∫–∏–π'
      }[updatedUser?.activity_level] || updatedUser?.activity_level || '‚Äî';

      const goalText = {
        'lose': '–°–±—Ä–æ—Å –≤–µ—Å–∞',
        'maintain': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ',
        'gain': '–ù–∞–±–æ—Ä –≤–µ—Å–∞'
      }[updatedUser?.goal] || updatedUser?.goal || '‚Äî';

      await ctx.reply(
        `‚úÖ ${actualChanges.join(', ')} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω${actualChanges.length > 1 ? '—ã' : ''}!\n\n` +
        `üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n` +
        `üë§ –í–æ–∑—Ä–∞—Å—Ç: ${updatedUser?.age ?? '‚Äî'} –ª–µ—Ç\n` +
        `üë• –ü–æ–ª: ${genderText}\n` +
        `‚öñÔ∏è –í–µ—Å: ${updatedUser?.weight ?? '‚Äî'} –∫–≥\n` +
        `üìè –†–æ—Å—Ç: ${updatedUser?.height ?? '‚Äî'} —Å–º\n` +
        `ü§∏ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activityText}\n` +
        `ü•Ö –¶–µ–ª—å: ${goalText}\n\n` +
        `üìä –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: ${updatedUser?.daily_calories ?? '‚Äî'} –∫–∫–∞–ª\n` +
        `ü•© –ë–µ–ª–∫–∏: ${updatedUser?.protein ?? '‚Äî'} –≥ | ü•ë –ñ–∏—Ä—ã: ${updatedUser?.fat ?? '‚Äî'} –≥ | üçû –£–≥–ª–µ–≤–æ–¥—ã: ${updatedUser?.carbs ?? '‚Äî'} –≥`,
        { parse_mode: 'HTML' }
      );

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é
      await ctx.reply(
        'üîÑ –•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤?',
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –î–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é', callback_data: 'generate_new_menu' },
                { text: '‚ùå –ù–µ—Ç, –ø–æ–∑–∂–µ', callback_data: 'no_new_menu' }
              ]
            ]
          }
        }
      );
    } else {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
      await ctx.reply(
        `‚ÑπÔ∏è ${fieldNames[field]} –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ. –ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ.`,
        getMainMenuKeyboard()
      );
    }

  } catch (error) {
    console.error('Error updating user data:', error);
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    console.error('Field:', field, 'Value:', value);
    console.error('Update data:', updateData);

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    ctx.session.updateField = null;
    ctx.session.waitingForUpdate = false;

    let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    if (error.message === 'Missing required data for calculation') {
      errorMessage = '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏–∫–æ–º.';
    } else if (error.message === 'Invalid calculated values') {
      errorMessage = '‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –∫–∞–ª–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏–∫–æ–º.';
    }

    await ctx.reply(errorMessage, getMainMenuKeyboard());
  }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–Ω–µ–π (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
bot.hears('–ú–æ—ë –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é', validateUser, async (ctx) => {
  try {
    const telegramId = ctx.from.id;
    const user = await userController.getUserByTelegramId(telegramId);
    if (!user) {
      return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code> –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.', { parse_mode: 'HTML' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const menuRes = await db.query(
      'SELECT id FROM menus WHERE user_id=$1 ORDER BY created_at DESC LIMIT 1',
      [user.id]
    );
    if (menuRes.rows.length === 0) {
      return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é.');
    }
    const menuId = menuRes.rows[0].id;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–π
    const dayButtons = [
      [
        { text: '–î–µ–Ω—å 1', callback_data: 'day_1' },
        { text: '–î–µ–Ω—å 2', callback_data: 'day_2' }
      ],
      [
        { text: '–î–µ–Ω—å 3', callback_data: 'day_3' },
        { text: '–î–µ–Ω—å 4', callback_data: 'day_4' }
      ],
      [
        { text: '–î–µ–Ω—å 5', callback_data: 'day_5' },
        { text: '–î–µ–Ω—å 6', callback_data: 'day_6' }
      ],
      [
        { text: '–î–µ–Ω—å 7', callback_data: 'day_7' }
      ],
      [
        { text: 'üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data: `shopping_list_${menuId}` }
      ]
    ];

    await ctx.reply(
      'üìã –í–∞—à–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª—é–¥–∞:',
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: dayButtons
        }
      }
    );
  } catch (error) {
    console.error('Error showing menu:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–Ω—è
bot.action(/day_(\d+)/, validateUser, async (ctx) => {
  try {
    const day = parseInt(ctx.match[1]);
    console.log('Day request received for day:', day);
    
    const telegramId = ctx.from.id;
    const user = await userController.getUserByTelegramId(telegramId);
    if (!user) {
      return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const menuRes = await db.query(
      'SELECT id FROM menus WHERE user_id=$1 ORDER BY created_at DESC LIMIT 1',
      [user.id]
    );
    if (menuRes.rows.length === 0) {
      return ctx.answerCbQuery('–ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', { show_alert: true });
    }
    const menuId = menuRes.rows[0].id;

    // –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
    const mealsRes = await db.query(
      'SELECT id, day, meal_time, name, calories, protein, fat, carbs, portion_weight FROM meals WHERE menu_id=$1 AND day=$2',
      [menuId, day]
    );
    const dayMeals = mealsRes.rows;

    if (dayMeals.length === 0) {
      return ctx.answerCbQuery('–ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è', { show_alert: true });
    }

      let msg = `üìÖ <b>–î–µ–Ω—å ${day}</b>\n\n`;
      const buttons = [];

      dayMeals.forEach(m => {
        const title = escapeHtml(m.name);
        const mealLabel = m.meal_time === 'breakfast' ? '–ó–∞–≤—Ç—Ä–∞–∫' : m.meal_time === 'lunch' ? '–û–±–µ–¥' : '–£–∂–∏–Ω';
        const macros = escapeHtml(`–ë${m.protein}/–ñ${m.fat}/–£${m.carbs}`);
      const portion = escapeHtml(String(m.portion_weight));
        msg += `üçΩÔ∏è <b>${mealLabel}</b>\n` +
          `‚Ä¢ <b>${title}</b>\n` +
          `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${m.calories} –∫–∫–∞–ª\n` +
          `‚Ä¢ –ë–ñ–£: ${macros}\n` +
          `‚Ä¢ –ü–æ—Ä—Ü–∏—è: ‚âà ${portion} –≥\n\n`;
        buttons.push([{
          text: m.name,
          callback_data: `recipe_${m.id}`
        }]);
      });

    await ctx.answerCbQuery();
    await ctx.reply(msg, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: buttons
        }
      });
    console.log('Day menu sent successfully');
  } catch (error) {
    console.error('Error fetching day menu:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é', { show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫
bot.action(/shopping_list_(\d+)/, validateUser, async (ctx) => {
  try {
    const menuId = ctx.match[1];
    console.log('Shopping list request received for menu:', menuId);

    await ctx.answerCbQuery();
    await ctx.reply('üõí –§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');

    // –ñ–¥—ë–º –ø–æ–∫–∞ –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã
        const deadline = Date.now() + 120000; // –∂–¥—ë–º –¥–æ 2 –º–∏–Ω—É—Ç
        let mealsFromDb = [];
        while (Date.now() < deadline) {
          const res = await db.query('SELECT name, recipe FROM meals WHERE menu_id=$1', [menuId]);
          mealsFromDb = res.rows;
          const total = mealsFromDb.length;
          const ready = mealsFromDb.filter(m => !!m.recipe).length;
      console.log(`Recipes ready: ${ready}/${total}`);
          if (total > 0 && ready === total) break;
          await new Promise(r => setTimeout(r, 5000));
        }

    if (mealsFromDb.length === 0) {
      return ctx.reply('–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥.');
    }

        const shoppingList = await getShoppingListFromMenu(mealsFromDb);
        const text = String(shoppingList || '').trim();
    if (!text) {
      return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.');
    }

        const looksLikeJson = /^\s*[\[{]/.test(text);
        const payload = looksLikeJson
          ? `üõí <b>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n<pre>${escapeHtml(text)}</pre>`
          : `üõí <b>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n${text}`;
    
    await ctx.reply(payload, { parse_mode: 'HTML' });
    console.log('Shopping list sent successfully');
  } catch (error) {
    console.error('Error generating shopping list:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ—Ü–µ–ø—Ç–∞
bot.action(/recipe_(\d+)/, validateUser, async (ctx) => {
  try {
    const mealId = ctx.match[1];
    console.log('Recipe request received for meal:', mealId);
    
    const meal = await getRecipeByMealId(mealId);
    if (!meal) {
      console.log('Recipe not found for meal:', mealId);
      return ctx.answerCbQuery('–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
    }

    const { ingredients = [], steps = [], cookingTimeMinutes = 0 } = meal.recipe;

    let msg = `üìñ <b>–†–µ—Ü–µ–ø—Ç: ${escapeHtml(meal.name)}</b>\n\n`;
    msg += `ü•ï <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n`;
    ingredients.forEach(ing => {
      msg += ` ‚Ä¢ ${escapeHtml(ing)}\n`;
    });
    msg += `\nüë®‚Äçüç≥ <b>–®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b>\n`;
    steps.forEach((step, i) => {
      msg += `${i + 1}. ${escapeHtml(step)}\n`;
    });
    msg += `\n‚è± <b>–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b> ~${cookingTimeMinutes} –º–∏–Ω—É—Ç\n`;

    await ctx.answerCbQuery();
    await ctx.reply(msg.replace(/\n/g,'\n'), { parse_mode: 'HTML' });
    console.log('Recipe sent successfully');
  } catch (error) {
    console.error('Error fetching recipe:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞', { show_alert: true });
  }
});

module.exports = bot;
