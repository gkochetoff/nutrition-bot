const { Telegraf, session, Scenes } = require('telegraf');
const { BOT_TOKEN } = require('./config');
const registerScene = require('./scenes/registerScene');
const userController = require('./controllers/userController');
const { createWeeklyMenu, getShoppingListFromMenu } = require('./controllers/menuController');
const { getRecipeByMealId } = require('./controllers/recipeController');
const escapeMd = require('./utils/escapeMarkdown');
const escapeHtml = require('./utils/escapeHtml');
const rateLimit = require('telegraf-ratelimit');
const db = require('./services/db');

console.log('Initializing bot with token:', BOT_TOKEN ? 'Token exists' : 'Token missing');
if (!BOT_TOKEN) {
  throw new Error('BOT_TOKEN is not set. Please configure environment variables.');
}
const bot = new Telegraf(BOT_TOKEN);

// Rate limiting middleware
bot.use(rateLimit({
  window: 1000, // 1 second
  limit: 1, // 1 message per second
  onLimitExceeded: (ctx) => ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.')
}));

// Error handling middleware
bot.use(async (ctx, next) => {
  try {
    console.log('Processing message from user:', ctx.from?.id);
    await next();
  } catch (err) {
    console.error('Bot error:', err);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  }
});

// –°—Ü–µ–Ω—ã
console.log('Setting up scenes...');
const stage = new Scenes.Stage([ registerScene ]);
bot.use(session());
bot.use(stage.middleware());

// Input validation middleware
const validateUser = async (ctx, next) => {
  if (!ctx.from || !ctx.from.id) {
    console.error('User validation failed: missing user data');
    return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }
  console.log('User validated:', ctx.from.id);
  return next();
};

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(validateUser, (ctx) => {
  console.log('Start command received from user:', ctx.from.id);
  ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é.\n\nüìù –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!');
  ctx.scene.enter('registerScene');
});

// –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã /menu
bot.command('menu', validateUser, async (ctx) => {
  console.log('Menu command received from user:', ctx.from.id);
  const telegramId = ctx.from.id;
  const user = await userController.getUserByTelegramId(telegramId);
  if (!user) {
    console.log('User not found:', telegramId);
    return ctx.reply('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code> –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.', { parse_mode: 'HTML' });
  }

  console.log('Generating menu for user:', telegramId);
      await ctx.reply('üçΩÔ∏è –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –Ø –ø—Ä–∏—à–ª—é –¥–Ω–∏ –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.');
  
  try {
    console.log('Creating weekly menu...');
    const { menuId, meals } = await createWeeklyMenu(
      user.id,
      user.daily_calories,
      user.protein,
      user.fat,
      user.carbs,
      user.goal
    );
    console.log('Menu created successfully, menuId:', menuId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é –ø–æ –¥–Ω—è–º –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    for (let day = 1; day <= 7; day++) {
      const dayMeals = meals.filter(m => m.day === day);
      if (dayMeals.length === 0) continue;

      console.log(`Sending menu for day ${day}`);
      let msg = `üìÖ <b>–î–µ–Ω—å ${day}</b>\n\n`;
      const buttons = [];

      dayMeals.forEach(m => {
        const title = escapeHtml(m.name);
        const mealLabel = m.meal_time === 'breakfast' ? '–ó–∞–≤—Ç—Ä–∞–∫' : m.meal_time === 'lunch' ? '–û–±–µ–¥' : '–£–∂–∏–Ω';
        const macros = escapeHtml(`–ë${m.protein}/–ñ${m.fat}/–£${m.carbs}`);
        const portion = escapeHtml(String(m.portion));
        msg += `üçΩÔ∏è <b>${mealLabel}</b>\n` +
          `‚Ä¢ <b>${title}</b>\n` +
          `‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: ${m.calories} –∫–∫–∞–ª\n` +
          `‚Ä¢ –ë–ñ–£: ${macros}\n` +
          `‚Ä¢ –ü–æ—Ä—Ü–∏—è: ‚âà ${portion} –≥\n\n`;
        buttons.push([{
          text: m.name,
          callback_data: `recipe_${m.id}`
        }]);
      });

      await bot.telegram.sendMessage(telegramId, msg, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: buttons
        }
      });
    }

    // –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ —Ä–µ—Ü–µ–ø—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã
    console.log('Scheduling shopping list generation...');
    (async () => {
      try {
        const deadline = Date.now() + 120000; // –∂–¥—ë–º –¥–æ 2 –º–∏–Ω—É—Ç
        let mealsFromDb = [];
        while (Date.now() < deadline) {
          const res = await db.query('SELECT name, recipe FROM meals WHERE menu_id=$1', [menuId]);
          mealsFromDb = res.rows;
          const total = mealsFromDb.length;
          const ready = mealsFromDb.filter(m => !!m.recipe).length;
          if (total > 0 && ready === total) break;
          await new Promise(r => setTimeout(r, 5000));
        }

        if (mealsFromDb.length === 0) return;

        const shoppingList = await getShoppingListFromMenu(mealsFromDb);
        const text = String(shoppingList || '').trim();
        if (!text) return;
        const looksLikeJson = /^\s*[\[{]/.test(text);
        const payload = looksLikeJson
          ? `üõí <b>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n<pre>${escapeHtml(text)}</pre>`
          : `üõí <b>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n${text}`;
        await bot.telegram.sendMessage(
          telegramId,
          payload,
          { parse_mode: 'HTML' }
        );
        console.log('Shopping list sent');
      } catch (e) {
        console.error('Failed to send shopping list:', e);
      }
    })();
    console.log('Menu generation completed successfully');

  } catch (error) {
    console.error('Error generating menu:', error);
    await bot.telegram.sendMessage(telegramId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ—Ü–µ–ø—Ç–∞
bot.action(/recipe_(\d+)/, validateUser, async (ctx) => {
  try {
    const mealId = ctx.match[1];
    console.log('Recipe request received for meal:', mealId);
    
    const meal = await getRecipeByMealId(mealId);
    if (!meal) {
      console.log('Recipe not found for meal:', mealId);
      return ctx.answerCbQuery('–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });
    }

    const { ingredients = [], steps = [], cookingTimeMinutes = 0 } = meal.recipe;

    let msg = `üìñ <b>–†–µ—Ü–µ–ø—Ç: ${escapeHtml(meal.name)}</b>\n\n`;
    msg += `ü•ï <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>\n`;
    ingredients.forEach(ing => {
      msg += ` ‚Ä¢ ${escapeHtml(ing)}\n`;
    });
    msg += `\nüë®‚Äçüç≥ <b>–®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b>\n`;
    steps.forEach((step, i) => {
      msg += `${i + 1}. ${escapeHtml(step)}\n`;
    });
    msg += `\n‚è± <b>–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b> ~${cookingTimeMinutes} –º–∏–Ω—É—Ç\n`;

    await ctx.answerCbQuery();
    await ctx.reply(msg.replace(/\n/g,'\n'), { parse_mode: 'HTML' });
    console.log('Recipe sent successfully');
  } catch (error) {
    console.error('Error fetching recipe:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞', { show_alert: true });
  }
});

module.exports = bot;
