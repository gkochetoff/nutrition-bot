const { Telegraf, session, Scenes } = require('telegraf');
const { BOT_TOKEN } = require('./config');
const registerScene = require('./scenes/registerScene');
const userController = require('./controllers/userController');
const { createWeeklyMenu, getShoppingListFromMenu } = require('./controllers/menuController');
const { getRecipeByMealId } = require('./controllers/recipeController');

const bot = new Telegraf(BOT_TOKEN);

// –°—Ü–µ–Ω—ã
const stage = new Scenes.Stage([ registerScene ]);
bot.use(session());
bot.use(stage.middleware());

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é.');
  ctx.scene.enter('registerScene');
});

// –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã /menu
bot.command('menu', async (ctx) => {
  const telegramId = ctx.from.id;
  const user = await userController.getUserByTelegramId(telegramId);
  if (!user) {
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏ /start –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.');
  }
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å user.is_premium

  await ctx.reply('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é... –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è (–¥–æ 2 –º–∏–Ω).');
  (async () => {
    try {
        const { menuId, meals } = await createWeeklyMenu(
            user.id,
            user.daily_calories,
            user.protein,
            user.fat,
            user.carbs,
            user.goal
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é –ø–æ –¥–Ω—è–º
        for (let day = 1; day <= 7; day++) {
            const dayMeals = meals.filter(m => m.day === day);
            if (dayMeals.length === 0) continue;

            let msg = `*–î–µ–Ω—å ${day}*\n`;
            const buttons = [];

            dayMeals.forEach(m => {
                msg += `${m.meal_time === 'breakfast' ? '–ó–∞–≤—Ç—Ä–∞–∫' : m.meal_time === 'lunch' ? '–û–±–µ–¥' : '–£–∂–∏–Ω'}:\n` +
                    `*${m.name}* ‚Äî ${m.calories} –∫–∫–∞–ª (–ë${m.protein}/–ñ${m.fat}/–£${m.carbs}), –ø–æ—Ä—Ü–∏—è ~${m.portion} –≥.\n\n`;
                buttons.push([{
                    text: m.name, 
                    callback_data: `recipe_${m.id}`
                }]);
            });

            await bot.telegram.sendMessage(telegramId, msg, {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: buttons
                }
            });
            /*await ctx.reply(msg, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: buttons }
            });*/
        }

        // –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
        const shoppingList = await getShoppingListFromMenu(meals);
        await bot.telegram.sendMessage(
            telegramId,
            `üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n${shoppingList}`,
            { parse_mode: 'Markdown' }
        );
        //await ctx.reply(`üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n${shoppingList}`, { parse_mode: 'Markdown' });

    } catch (error) {
        console.error('Error generating menu:', error);
        await bot.telegram.sendMessage(telegramId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
        //ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
  })();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ—Ü–µ–ø—Ç–∞
bot.action(/recipe_(\d+)/, async (ctx) => {
    const mealId = ctx.match[1];
    const meal = await getRecipeByMealId(mealId);
    if (!meal) return ctx.answerCbQuery('–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { show_alert: true });

    const { ingredients = [], steps = [], cookingTimeMinutes = 0 } = meal.recipe;

    let msg = `*${meal.name}*\n\n`;
    msg += `*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n`;
    ingredients.forEach(ing => {
        msg += ` - ${ing}\n`;
    });
    msg += `\n*–®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:*\n`;
    steps.forEach((step, i) => {
        msg += `${i + 1}. ${step}\n`;
    });
    msg += `\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ~${cookingTimeMinutes} –º–∏–Ω—É—Ç.\n`;

    await ctx.answerCbQuery();
    await ctx.reply(msg, { parse_mode: 'Markdown' });
});
  

module.exports = bot;
